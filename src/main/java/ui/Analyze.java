/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.awt.Component;
import java.sql.Date;
import java.sql.SQLException;
import java.time.LocalDate;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.plot.PlotOrientation;
import org.joda.money.CurrencyUnit;

/**
 *
 * @author ai
 */
public class Analyze extends javax.swing.JDialog {
private util.Db d;
    /**
     * Creates new form Analyze
     */
    public Analyze(java.awt.Frame parent, boolean modal,util.Db db) {
        super(parent, modal);
        d=db;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tab = new javax.swing.JTabbedPane();
        permintaan = new javax.swing.JTabbedPane();
        keuangan = new javax.swing.JTabbedPane();
        laba = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setType(java.awt.Window.Type.UTILITY);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tab.addTab("PERMINTAAN", permintaan);
        tab.addTab("UNTUNG RUGI", keuangan);
        tab.addTab("LABA", laba);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tab, javax.swing.GroupLayout.DEFAULT_SIZE, 1166, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tab, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        new Thread(new Runnable() {
            @Override
            public void run() {
                load();
            }
        }).start();
    }//GEN-LAST:event_formWindowOpened
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane keuangan;
    private javax.swing.JTabbedPane laba;
    private javax.swing.JTabbedPane permintaan;
    private javax.swing.JTabbedPane tab;
    // End of variables declaration//GEN-END:variables

    private void permintaan() throws SQLException {
        Date max=tglMax(),min=tglMin();
        for(LocalDate l=max.toLocalDate();l.isAfter(min.toLocalDate())||l.equals(max.toLocalDate());l=l.minusMonths(1))
            permintaan.add(""+l+" s/d "+l.plusMonths(1), buatPermintaan(l));
    }

    private void keuangan() throws SQLException {
        Date max=tglMax(),min=tglMin();
        for(LocalDate l=max.toLocalDate();l.isAfter(min.toLocalDate())||l.equals(min.toLocalDate());l=l.minusWeeks(1))
            keuangan.add(""+l+" s/d "+l.plusWeeks(1), buatKeuangan(l));
    }

    private void load() {
        try {
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        permintaan();
        keuangan();
        laba();
    } catch (SQLException ex) {
        util.Db.hindar(ex);
    }this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }

    private Date tglMax() throws SQLException {
        Date tgl=null;
        java.sql.ResultSet r=d.keluar("select max(tgl)as intok from jual");
        if(r.next())tgl=r.getDate("intok");
        r.close();
        return tgl;
    }

    private Date tglMin() throws SQLException {
        Date tgl=null;
        java.sql.ResultSet r=d.keluar("select min(tgl)as intok from jual");
        if(r.next())tgl=r.getDate("intok");
        r.close();
        return tgl;
    }

    private Component buatPermintaan(LocalDate l) throws SQLException {
        org.jfree.data.general.DefaultPieDataset data=new org.jfree.data.general.DefaultPieDataset();
        java.sql.PreparedStatement p=d.getPS("select detjual.brg,sum(detjual.jum)as qty from jual inner join detjual where jual.tgl>=? and "
                + "jual.tgl<? group by detjual.brg");
        p.setDate(1, Date.valueOf(l));
        p.setDate(2, Date.valueOf(l.plusMonths(1)));
        java.sql.ResultSet r=p.executeQuery();
        while(r.next())data.setValue(getNamaBrg(r.getString("brg")), r.getDouble("qty"));
        r.close();
        p.close();
        return new org.jfree.chart.ChartPanel(ChartFactory.createPieChart("PERMINTAAN", data,true,true,false));
    }

    private String getNamaBrg(String kode)throws SQLException{
        java.sql.PreparedStatement p=d.getPS("select nm from barang where kode=?");
        p.setString(1, kode);
        java.sql.ResultSet r=p.executeQuery();
        String s="";
        if(r.next())s=r.getString("nm");
        r.close();
        p.close();
        return s;
    }

    private Component buatKeuangan(LocalDate l) throws SQLException {
        org.jfree.data.category.DefaultCategoryDataset data=new org.jfree.data.category.DefaultCategoryDataset();
        for(LocalDate l2=l;l2.isBefore(l.plusWeeks(1));l2=l2.plusDays(1)){
            data.addValue(getUntung(l2), "Untung", l2);
            data.addValue(getRugi(l2), "Rugi", l2);
        }return new org.jfree.chart.ChartPanel(ChartFactory.createBarChart("Untung Rugi", "Periode", "Nilai", data,
                PlotOrientation.VERTICAL,true,true
        ,false));
    }

    private Number getUntung(LocalDate l2) throws SQLException {
        org.joda.money.Money m=org.joda.money.Money.zero(CurrencyUnit.of("IDR"));
        java.sql.PreparedStatement p=d.getPS("select total from jual where tgl=?");
        p.setDate(1, Date.valueOf(l2));
        java.sql.ResultSet r=p.executeQuery();
        while(r.next())m=m.plus(org.joda.money.Money.parse(r.getString("total")));
        r.close();
        p.close();
        return m.getAmount().longValueExact();
    }

    private Number getRugi(LocalDate l2) throws SQLException {
        double dou=0;
        java.sql.PreparedStatement p=d.getPS("select sum(sat*jum)as oke from memasok where tgl=?");
        p.setDate(1, Date.valueOf(l2));
        java.sql.ResultSet r=p.executeQuery();
        if(r.next())dou=r.getDouble("oke");
        r.close();
        p.close();
        return dou;
    }

    private void laba() throws SQLException {
        Date max=tglMax(),min=tglMin();
        for(LocalDate l=max.toLocalDate();l.isAfter(min.toLocalDate())||l.equals(min.toLocalDate());l=l.minusWeeks(1))
            laba.add(""+l.minusWeeks(1)+" s/d "+l, labane(l));
    }

    private Component labane(LocalDate l) throws SQLException {
        org.jfree.data.category.DefaultCategoryDataset data=new org.jfree.data.category.DefaultCategoryDataset();
        for(LocalDate l2=l;l2.isBefore(l.plusWeeks(1));l2=l2.plusDays(1)){
            Number u=getUntung(l2),r=getRugi(l2);
            data.addValue(u.longValue()-r.longValue(), "Laba", l2);
        }return new org.jfree.chart.ChartPanel(ChartFactory.createLineChart("Laba Bersih", "Periode", "Nilai", data,
                PlotOrientation.VERTICAL,true,true
        ,false));
    }
}